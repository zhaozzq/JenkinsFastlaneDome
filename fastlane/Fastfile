# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.55.0"

default_platform :ios

platform :ios do
  before_all do

    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    
    ensure_git_status_clean

    notes = changelog_from_git_commits(commits_count: 1)

    print "changelog_from_git_commits: #{notes}"

    lastnote = notes[0, 19]

    print "lastnote: #{lastnote}\n"

    if lastnote == 'Build via Fastlane!' 
    	# next
    	UI.user_error!("Skip this commit: #{notes}")
    end

    ENV['DEVELOPER_DIR'] = '/Applications/Xcode-beta.app/Contents/Developer'

    cocoapods
    
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do |options|
    # match(type: "appstore") # more information: https://codesigning.guide
    #cert
    #sigh

    scheme = options[:scheme]
    
    date = Time.new.strftime("%Y%m%d-%H%M")

    oldbuild = get_build_number()

    #increment_build_number(build_number: 4)
    increment_build_number

    newbuild = get_build_number()

    version = get_version_number()

    print " oldbuild: #{oldbuild}\n newbuild: #{newbuild}\n version: #{version}\n"

    commit_version_bump(message: "Build via Fastlane! build version #{newbuild}", force: true)

    gym(
      scheme: "JenkinsFastlane", 
      output_directory: "../build/#{scheme}/#{date}",
      output_name: "#{scheme}-#{date}.ipa",
      clean: true,
      silent: true,
      include_symbols: true,
      export_method:'app-store',
    )    

    # sh "open ../../build/#{scheme}/#{date}"

    #pilot

    # sh "your_script.sh"
    # You can also use other beta testing services here (run `fastlane actions`)

    push_to_git_remote(remote: 'origin', local_branch: 'HEAD', remote_branch: 'master', force: true)

    #hg_push

    #clean_build_artifacts

  end

  desc "Deploy a new version to the App Store"
  lane :release do |options|
    # match(type: "appstore")
    # snapshot

    scheme = options[:scheme]
    date = Time.new.strftime("%Y%m%d-%H%M")

    oldbuild = get_build_number()

    increment_build_number

    newbuild = get_build_number()

    version = get_version_number()

    print "oldbuild: #{oldbuild}\n newbuild: #{newbuild}\n version: #{version}"

    # commit_version_bump(message: 'Bump version', force: true)

    gym(
      scheme: "#{scheme}", 
      output_directory: "../build/#{scheme}/#{date}",
      output_name: "#{scheme}-#{date}.ipa",
      clean: true,
      silent: true,
      include_symbols: true,
      export_method:'app-store',
    )
    # deliver(force: true)
    # frameit

    # push_to_git_remote(remote: 'origin', local_branch: 'master', remote_branch: 'master', force: false)

    clean_build_artifacts
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    slack(
      message: "Successfully deployed new App Update.",
      channel: "#general",
      # slack_url: "https://hooks.slack.com/services/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"
    )
  end

  error do |lane, exception|
    slack(
      message: exception.message,
      success: false,
      channel: "#general",
      # slack_url: "https://hooks.slack.com/services/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"
    )
  end

  desc "打包测试版本"  #fastlane releaseDev
  lane :dev do
      beta(scheme: 'JenkinsFastlane')
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
